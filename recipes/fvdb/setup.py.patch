diff --git a/fvdb/setup.py b/fvdb/setup.py
index 1770933e..8d40d38d 100644
--- a/fvdb/setup.py
+++ b/fvdb/setup.py
@@ -7,6 +7,7 @@ import platform
 import re
 import shutil
 import subprocess
+import sys
 import tarfile
 from pathlib import Path
 from typing import List, Tuple
@@ -20,7 +21,7 @@ from torch.utils import cpp_extension
 from tqdm import tqdm
 
 is_conda_env = "CONDA_PREFIX" in os.environ
-if is_conda_env:
+if False:
     os.environ["CXX"] = "x86_64-conda-linux-gnu-g++"
     os.environ["NVCC_CCBIN"] = "x86_64-conda-linux-gnu-gcc"
 
@@ -134,63 +135,6 @@ class FVDBBuildCommand(cpp_extension.BuildExtension):
                 regular_file = os.path.join(os.path.dirname(regular_file), "libfvdb.so")
                 self.copy_file(regular_file, inplace_file, level=self.verbose)  # type: ignore
 
-    def run(self) -> None:
-        # A sibling nanovdb source directory will exist if fvdb is being built as part of OpenVDB
-        sibling_nanovdb_dir = Path("../nanovdb")
-        if not sibling_nanovdb_dir.exists():
-            openvdb_url = "https://github.com/kmuseth/openvdb.git"
-            self.download_external_dep(name="openvdb", git_url=openvdb_url, git_tag="feature/nanovdb_v32.7")
-
-        _, cutlass_repo = self.download_external_dep(
-            name="cutlass",
-            git_url="https://github.com/NVIDIA/cutlass.git",
-            git_tag="v3.4.0",
-        )
-        try:
-            # NOTE:  In python <=3.8, __file__ will be a relative path and >3.8 it is an absolute path
-            cutlass_repo.git.apply(Path(__file__).resolve().parent / "env" / "cutlass.patch")
-        except GitCommandError as e:
-            logging.info(f"Failed to apply cutlass patch: {str(e)}, continuing without patching")
-
-        self.download_external_dep(
-            name="cudnn_fe",
-            git_url="https://github.com/NVIDIA/cudnn-frontend",
-            git_tag="v1.3.0",
-        )
-
-        blosc_source_dir, _ = self.download_external_dep(
-            name="c-blosc",
-            git_url="https://github.com/Blosc/c-blosc.git",
-            git_tag="v1.21.4",
-        )
-        self.build_cmake_project(
-            blosc_source_dir,
-            [
-                "-DBUILD_SHARED=OFF",
-                "-DBUILD_TESTS=OFF",
-                "-DBUILD_FUZZERS=OFF",
-                "-DBUILD_BENCHMARKS=OFF",
-                "-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
-            ],
-        )
-
-        self.download_external_dep(name="glm", git_url="https://github.com/g-truc/glm.git", git_tag="1.0.1")
-
-        self.old_inplace = self.inplace
-        super().run()
-
-        # Find all the headers and copy them into the build directory.
-        # This way extension modules of FVDB can include them.
-        fvdb_headers = get_header_files_recursive("src", "fvdb")
-        nanovdb_headers = get_header_files_recursive(get_nanovdb_source_dir(), "nanovdb")
-
-        for header_folder, header_files in fvdb_headers + nanovdb_headers:
-            os.makedirs(os.path.join(self.build_lib, header_folder), exist_ok=True)
-
-            for header_file in header_files:
-                shutil.copy(header_file, os.path.join(self.build_lib, header_folder))
-
-
 def get_source_files_recursive(base_path, exclude=[], include_bindings=True) -> List[str]:
     source_files = []
     for dir_name, dir, dir_files in os.walk(base_path, topdown=True):
@@ -308,7 +252,7 @@ if __name__ == "__main__":
 
     if cuda_version is not None and int(cuda_version.split(".")[0]) >= 12:
         cpp_std = "c++20"
-        cudnn_include_dirs, cudnn_static_libs = download_and_install_cudnn()
+        cudnn_include_dirs, cudnn_static_libs = [], []
     else:
         cpp_std = "c++17"
         cudnn_include_dirs, cudnn_static_libs = [], []
@@ -341,22 +285,13 @@ if __name__ == "__main__":
         sources=get_source_files_recursive("src", exclude, include_bindings=False),
         include_dirs=[
             cwd / "src",
-            cwd / get_nanovdb_source_dir(),
-            cwd / "external/cutlass/include",
-            cwd / "external/c-blosc/install/include",
-            cwd / "external/cudnn_fe/include",
-            cwd / "external/glm",
-        ]
-        + cudnn_include_dirs,
-        extra_objects=[
-            "external/c-blosc/install/lib/libblosc.a",
-        ]
-        + cudnn_static_libs,
+        ],
         extra_compile_args={
             "cxx": cpp_flags + ["-fvisibility=default"],
             "nvcc": nvcc_flags,
         },
         language="c++",
+        libraries=[ f"python{sys.version_info[0]}.{sys.version_info[1]}" ]
     )
 
     bind_ext = cpp_extension.CUDAExtension(
@@ -364,13 +299,12 @@ if __name__ == "__main__":
         sources=get_source_files_recursive("src/python/", exclude),
         include_dirs=[
             cwd / "src",
-            cwd / get_nanovdb_source_dir(),
-            cwd / "external/cutlass/include",
-            cwd / "external/c-blosc/install/include",
-            cwd / "external/glm",
         ],
         library_dirs=[str(cwd / "fvdb")],
-        libraries=["fvdb"],
+        libraries=[
+            "fvdb", 
+            f"python{sys.version_info[0]}.{sys.version_info[1]}",
+        ],
         extra_link_args=["-Wl,-rpath,$ORIGIN"],
         extra_compile_args={
             "cxx": cpp_flags + ["-fvisibility=hidden"],
